name: Build release
defaults:
  run:
    shell: bash

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version string for upstream release"
        required: true
        type: string
      file_name:
        description: "File name of release artifact"
        type: string
        required: true
      download_url:
        description: "Download URL for release artifact"
        type: string
        required: true
      description:
        description: "Release notes to add to release body"
        type: string
        required: false
        default: "Take a look at the assets to download and install this app."
      local_commit_ref:
        description: "Commit ref to checkout"
        type: string
        required: false
        default: main

  workflow_call:
    inputs:
      version:
        description: "Version string for upstream release"
        required: true
        type: string
      file_name:
        description: "File name of release artifact"
        type: string
        required: true
      download_url:
        description: "Download URL for release artifact"
        type: string
        required: true
      description:
        description: "Release notes to add to release body"
        type: string
        required: false
        default: "Take a look at the assets to download and install this app."
      local_commit_ref:
        description: "Commit ref to checkout"
        type: string
        required: false
        default: ${{ github.ref }}

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.result }}

    steps:
      - name: create release
        id: create_release
        uses: actions/github-script@v7
        env:
          RELEASE_VERSION: ${{ inputs.version }}
          RELEASE_DESCRIPTION: ${{ inputs.description }}
        with:
          script: |
            const { RELEASE_VERSION, RELEASE_DESCRIPTION } = process.env
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${RELEASE_VERSION}`,
              name: `CyberChef v${RELEASE_VERSION}`,
              body: RELEASE_DESCRIPTION,
              draft: true,
              prerelease: false
            })

            return data.id

  fetch_and_build:
    needs: create_release
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 360
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.local_commit_ref }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Sync node version and npm cache
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Download latest artifact
        id: download_dist
        run: |
          curl -s -L --create-dirs --output-dir ./archive  -o ${{ inputs.file_name }} ${{ inputs.download_url }}
          unzip ./archive/${{ inputs.file_name }} -d ./dist/
          mv ./dist/CyberChef_v${{ inputs.version }}.html ./dist/index.html
          rm -rf ./archive/

      - name: Build and upload release
        uses: tauri-apps/tauri-action@dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create_release.outputs.release_id }}
          tagName: v${{ inputs.version }}

  publish-release:
    runs-on: ubuntu-latest
    needs: [create_release, fetch_and_build]
    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create_release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
